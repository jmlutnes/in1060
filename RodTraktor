#define NOTE_F3  175
#define NOTE_G3  196
#define NOTE_B3  247
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_D4  294
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_G4  392
#define NOTE_B4  494
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186

int ANTALL_LYDAVSPILLINGER = 4;
int ANTALL_NOTER = 41;

// notes in the melody:
int melody[] = {

  NOTE_G4,NOTE_F4,NOTE_G4,NOTE_C5,
    NOTE_G4,NOTE_F4,NOTE_G4,NOTE_C5,
  NOTE_A4, NOTE_G4, NOTE_A4, NOTE_D5,
  	NOTE_A4, NOTE_G4, NOTE_A4, NOTE_D5,
  
  NOTE_G4,NOTE_F4,NOTE_G4,NOTE_C5,
    NOTE_G4,NOTE_F4,NOTE_G4,NOTE_C5,
  NOTE_A4, NOTE_G4, NOTE_A4, NOTE_D5,
  	NOTE_A4, NOTE_G4, NOTE_A4, NOTE_D5,
  
  NOTE_C5, NOTE_A4, NOTE_G4, NOTE_A4, NOTE_G4, NOTE_F4,
  	NOTE_C5, NOTE_D5, NOTE_F5
  
};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations[] = {
  4, 6, 4, 2,
  4, 6, 4, 2,
  4, 6, 4, 2,
  4, 6, 4, 2,
  4, 6, 4, 2,
  4, 6, 4, 2,
  4, 6, 4, 2,
  4, 6, 4, 2,
  4, 6, 4, 6, 4, 2,
  8, 12, 2
};

// Sensorer - vann
int moisture = 0;
int TOERRTERSKEL;
int VAATTERSKEL = 700;
int LYDTERSKEL = 500;
int UTPUTVERDI = 500;
int SENSORVERDI = 0;
bool lydPaa = false;
bool lydPaaToerr = false;

//pH sensor
unsigned long int avgValue;  //Store the average value of the sensor feedback
float b;
int buf[10],temp;

void setup()
{
  pinMode(A0, OUTPUT);
  pinMode(A1, INPUT);
  
  //Switch
  pinMode(A2, INPUT);
  
  //Switch rotering
  pinMode(A3, INPUT);
  
  pinMode(6,OUTPUT);
  //Lydutgang
  pinMode(7, OUTPUT);
  
  Serial.begin(9600);
  //LED-lysene
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(8, OUTPUT);
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  
  
  //pH sensor
  pinMode(13,OUTPUT);
  pinMode(A5, INPUT);
  
}

void loop()
{
  
  //LED
  digitalWrite(5, LOW);
  digitalWrite(6, LOW);
  digitalWrite(8, LOW);
  digitalWrite(9, LOW);
  digitalWrite(10, LOW);
  digitalWrite(11, LOW);
  digitalWrite(12, LOW);

  
  moistureMethod();
  
  delay(100); // Wait for 100 millisecond(s)
  
  //Sjekker switch rotering
  Serial.println(SENSORVERDI);
  
  ph();

if((lydPaa || lydPaaToerr)&&(SENSORVERDI >LYDTERSKEL)){
  lydvarsel();
  }
}

void lydvarsel(){
for(int i = 0; i<ANTALL_LYDAVSPILLINGER; i++){
if(!(lydPaa || lydPaaToerr)||(SENSORVERDI <LYDTERSKEL)){break;};
  for (int thisNote = 0; thisNote < ANTALL_NOTER; thisNote++) {
      // to calculate the note duration, take one second
      // divided by the note type.
      //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
      int noteDuration = 1000 / noteDurations[thisNote];
      tone(7, melody[thisNote], noteDuration);

      // to distinguish the notes, set a minimum time between them.
      // the note's duration + 30% seems to work well:
      int pauseBetweenNotes = noteDuration * 1.00;
      delay(pauseBetweenNotes);
      // stop the tone playing:
      noTone(7);
      }
    }
}
  
//pH-sensor bruker kode hentet fra:
//https://how2electronics.com/ph-meter-using-ph-sensor-arduino-oled/
void moistureMethod(){
  //MOISTURE:
  // Apply power to the soil moisture sensor
  digitalWrite(A0, HIGH);
  delay(10); // Wait for 10 millisecond(s)
  moisture = analogRead(A1);
  // Turn off the sensor to reduce metal corrosion
  // over time
  
  //Les verdi til switch lyd sensory
  SENSORVERDI = analogRead(A3);
  
  
  
  digitalWrite(A0, LOW);
  Serial.print("Toerrterkel: ");
  Serial.println(TOERRTERSKEL);
  Serial.print("Moisture: ");
  Serial.println(moisture);
// read the value from the sensor
  TOERRTERSKEL = analogRead(A2);
  
  //Toerr og vaatterskellys
  if (moisture < TOERRTERSKEL) {
    digitalWrite(8, HIGH);
    lydPaaToerr = true;
    
  } else {
    digitalWrite(8, LOW);
    lydPaaToerr = false;
    
  }
   if (moisture > VAATTERSKEL) {
    digitalWrite(10, HIGH);
    lydPaa = true;
     
  } else {
     digitalWrite(10, LOW);
     lydPaa = false;
     
    }
}

void ph(){
  for(int i=0;i<10;i++)       //Get 10 sample value from the sensor for smooth the value
  { 
    buf[i]=analogRead(A5);
    delay(10);
  }
  for(int i=0;i<9;i++)        //sort the analog from small to large
  {
    for(int j=i+1;j<10;j++)
    {
      if(buf[i]>buf[j])
      {
        temp=buf[i];
        buf[i]=buf[j];
        buf[j]=temp;
      }
    }
  }
  avgValue=0;
  for(int i=2;i<8;i++) {                     //take the average value of 6 center sample
    avgValue+=buf[i];
  }
  float phValue=(float)avgValue*5.0/1024/6; //convert the analog into millivolt
  phValue=3.5*phValue;                      //convert the millivolt into pH value
  
  if(phValue > 9){
  	digitalWrite(5, HIGH);
  }
  else{
  	digitalWrite(5, LOW);
  }
  
  //Fjern dette?
  Serial.print("    pH:");  
  Serial.print(phValue,2);
  Serial.println(" ");
  digitalWrite(13, HIGH);       
   
  }


